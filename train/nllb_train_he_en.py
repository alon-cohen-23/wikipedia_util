# -*- coding: utf-8 -*-
"""NLLB_train_he_en.ipynb
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DayzYm-rny-EhKMN7Om0JuRssjH23OjC

"""
from pathlib import Path
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
import torch
from transformers import NllbTokenizer, AutoModelForSeq2SeqLM, DataCollatorForSeq2Seq, Seq2SeqTrainingArguments, Seq2SeqTrainer
from datasets import load_dataset, Dataset, DatasetDict, load_from_disk, concatenate_datasets
import evaluate
#import wandb

model_checkpoint = "facebook/nllb-200-distilled-600M" # 'output_models/nllb-200-distilled-1.3B_heb_eng_wiki_40000/checkpoint-80448/' # "facebook/nllb-200-distilled-1.3B" # "facebook/m2m100_418M" # "facebook/nllb-200-distilled-600M"

# Language codes: https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200    
src_lang = 'pes_Arab' # "arb_Arab" # "heb_Hebr" # "pes_Arab"
tgt_lang= 'eng_Latn'


df_folder_path = './data/fa_en' # './data/ar_en' # './data/he_en'
REVERSE_TRANSLATION_DIRECTION = True

DO_TRAIN = True
DO_EVAL = True
DO_PREDICT = True

max_input_length = 200 # Max chars in source sentence
max_target_length = 200 # Max chars in target sentence

#wandb.login()
# start a new wandb run to track this script
#wandb.init(project="NLLB-training-project", name = "nllb_600M_he_en_bidi")

data_path = Path('./data')

def read_df_folder(root_path, glob_pattern = "*.parquet", recursive=False, ignore_index=True, read_func=pd.read_parquet, **kwargs):
    """
    Reads a folder of .csv or .parquet --> concat to result df

    Parameters
    ----------
    root_path : TYPE
        DESCRIPTION.
    glob_pattern : TYPE, optional -  which files to read
        DESCRIPTION. The default is "*.parquet".
    recursive : True for recursive search - default=False    
    ignore_index : TYPE, optional
        DESCRIPTION. The default is True.
    read_func : pd.read_csv, pd.read_xxx 
        DESCRIPTION. The default is pd.read_parquet.
    **kwargs : args for read_xxx funcs (sep='\t', header=True ...)
        DESCRIPTION.

    Returns
    -------
    dframe : TYPE
        DESCRIPTION.

    """
    it_files = Path(root_path).rglob(glob_pattern) if recursive else Path(root_path).glob(glob_pattern)    
    lst_df = []
    for full_path in it_files:
        print(full_path)
        df = read_func(full_path, **kwargs)
        lst_df.append(df)
    
    dframe = pd.concat(lst_df, axis=0, ignore_index=ignore_index)
    return dframe

def create_dataset_train_val____filter_scores(df_folder_path, random_state=42, test_size=25000,   
                             max_input_length=200, max_target_length=200, train_size=-1,   
                             dataset_name='wikipedia_ar_en'):    
    """
    Filter train data by comet score ()
    """

    df = read_df_folder(df_folder_path)    
    if 'Unnamed: 0' in df.columns:    
        df = df.drop(columns=['Unnamed: 0'])    
  
    # Load scores dataframe  
    scores_df = pd.read_parquet('data/train_comet_scores.parquet')  
    # Left join df with scores  
    df = df.merge(scores_df, on=['EN_sentences', 'HE_sentences'], how='left')  
  
    # Check if there are any missing comet scores  
    missing_scores = df[df.comet_score.isna()]  
  
    if not missing_scores.empty:  
        # Load the model  
        comet_model = load_model("Unbabel/wmt22-cometkiwi-da")  
  
        # Convert the df to a list of dicts with 'src' for heb and 'mt' for eng sentences  
        data = [{'src': row['HE_sentences'], 'mt': row['EN_sentences']} for _, row in missing_scores.iterrows()]  
  
        # Calculate the missing scores  
        model_output = comet_model.predict(data, batch_size=64, gpus=1)  
  
        # Assign the calculated scores back to the dataframe  
        df.loc[df.comet_score.isna(), 'comet_score'] = model_output[0]  
  
        # Append the newly calculated scores to the scores dataframe and save it  
        new_scores = missing_scores.copy()  
        new_scores['comet_score'] = model_output[0]  
        scores_df = pd.concat([scores_df, new_scores])  
        scores_df.to_parquet('data/train_comet_scores.parquet')  
  
    # Filter rows with score < 0.6  
    df = df[df.comet_score >= 0.6]  
        
    df = df[df.HE_sentences.str.len() <= max_input_length]    
    df = df[df.EN_sentences.str.len() <= max_target_length]    
    df['translation'] = df.apply(lambda row: {'en': row['EN_sentences'], 'he': row['HE_sentences']}, axis=1)      
        
    # Drop the original 'EN_sentences' and 'HE_sentences' columns      
    df = df.drop(columns=['EN_sentences', 'HE_sentences'])      
  
       
    # Split the dataset into a train set and a validation set (small amount)  
    train_df, val_df = train_test_split(df, test_size=test_size, random_state=random_state)  
    
    if train_size > 0:
      train_df = train_df.iloc[:train_size]  
      
    train_dataset = Dataset.from_pandas(train_df)  
    train_dataset = train_dataset.remove_columns(['__index_level_0__'])  # Remove '__index_level_0__' feature from the datasets  
    val_dataset = Dataset.from_pandas(val_df)    
    val_dataset = val_dataset.remove_columns(['__index_level_0__'])  
    
    
    
  
    split_datasets = DatasetDict({  
        'train' : train_dataset,  
        'validation' : val_dataset,  
        })  
      
    data_folder = Path(df_folder_path).parent  
    train_df.to_parquet(data_folder / 'train.parquet')  
    val_df.to_parquet(data_folder / 'validation.parquet')  
    split_datasets.save_to_disk(data_folder / dataset_name) 
    return split_datasets  
  
    
def create_dataset_train_val(df_folder_path, random_state=42, test_size=25000, 
                             max_input_length=200, max_target_length=200, train_size=-1, 
                             dataset_name = f'wikipedia_{src_lang}_{tgt_lang}'):  
    df = read_df_folder(df_folder_path)  
    if 'Unnamed: 0' in df.columns:  
        df = df.drop(columns=['Unnamed: 0'])  
      
    df = df[df.HE_sentences.str.len() <= max_input_length]  
    df = df[df.EN_sentences.str.len() <= max_target_length]  
    df = df.drop_duplicates(subset=['HE_sentences'])
    df['translation'] = df.apply(lambda row: {'en': row['EN_sentences'], 'he': row['HE_sentences']}, axis=1)    
      
    # Drop the original 'EN_sentences' and 'HE_sentences' columns    
    df = df.drop(columns=['EN_sentences', 'HE_sentences'])    
          
   
      
    # Split the dataset into a train set and a validation set (small amount)  
    train_df, val_df = train_test_split(df, test_size=test_size, random_state=random_state)  
    
    if train_size > 0:
      train_df = train_df.iloc[:train_size]  
      
    train_dataset = Dataset.from_pandas(train_df)  
    train_dataset = train_dataset.remove_columns(['__index_level_0__'])  # Remove '__index_level_0__' feature from the datasets  
    val_dataset = Dataset.from_pandas(val_df)    
    val_dataset = val_dataset.remove_columns(['__index_level_0__'])  
    
    
    
  
    split_datasets = DatasetDict({  
        'train' : train_dataset,  
        'validation' : val_dataset,  
        })  
      
    data_folder = Path(df_folder_path).parent  
    train_df.to_parquet(data_folder / 'train.parquet')  
    val_df.to_parquet(data_folder / 'validation.parquet')  
    split_datasets.save_to_disk(data_folder / dataset_name) 
    return split_datasets  





def get_output_model_name(model_checkpoint,src_lang,tgt_lang):
    # Find the index of the first '/' character
    index = model_checkpoint.find('/')
    output_name = model_checkpoint
    if index != -1:
        # Extract the prefix (facebook/) and remove it from the original string        
        output_name  = model_checkpoint[index + 1:]        
    
    output_name += f'_{src_lang.split("_")[0]}_{tgt_lang.split("_")[0]}'
    #wandb.log({ "output_name": f"{output_name}" } )
    return output_name


output_name = get_output_model_name(model_checkpoint,src_lang,tgt_lang)




# Load wikipeida dataset
split_datasets = create_dataset_train_val(df_folder_path=df_folder_path, 
                                          max_input_length=max_input_length, 
                                          max_target_length=max_target_length,
                                          train_size=-1) # DO_PRED --> train_size=100 to avoid long tokenization


for key in split_datasets.keys():
  print (key)

metric = evaluate.load("sacrebleu")
#bleu_metric = load_metric("bleu")

tokenizer = NllbTokenizer.from_pretrained(model_checkpoint, src_lang=src_lang, tgt_lang=tgt_lang)

def create_preprocess_function(reverse_translation_direction):
    if reverse_translation_direction:
        src_l = tgt_lang
        tgt_l = src_lang
        inp_col = 'en'
        label_col  ='he'
    else:
        src_l = src_lang
        tgt_l = tgt_lang
        inp_col = 'he'
        label_col  ='en'
        
    tokenizer = NllbTokenizer.from_pretrained(model_checkpoint, src_lang=src_l, tgt_lang=tgt_l)
    
    def preprocess_function(examples):    
        inputs = [ex[inp_col] for ex in examples["translation"]]
        targets = [ex[label_col] for ex in examples["translation"]]
        
        model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=True)
    
        # Set up the tokenizer for targets        
        labels = tokenizer(text_target=targets, max_length=max_target_length, truncation=True)
    
        model_inputs["labels"] = labels["input_ids"]
        return model_inputs
    return preprocess_function

def compute_metrics(eval_preds):
    preds, labels = eval_preds
    # In case the model returns more than the prediction logits
    if isinstance(preds, tuple):
        preds = preds[0]

    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)

    # Replace -100s in the labels as we can't decode them
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    # Some simple post-processing
    decoded_preds = [pred.strip() for pred in decoded_preds]
    decoded_labels = [[label.strip()] for label in decoded_labels]

    # calculate the f1 score
    f1 = f1_score(decoded_labels, decoded_preds, average='weighted')

    # calculate scalerblue results
    scalerbleu_result = metric.compute(predictions=decoded_preds, references=decoded_labels)
    #bleu_result = bleu_metric.compute(predictions=decoded_preds, references=decoded_labels)

    # connects the metrics to wandb

    # Log F1 score to WandB
    res = {"sacrebleu": scalerbleu_result["score"], "f1_score": f1}
    print(res)

    # Append the F1 score to the list for tracking
    f1_scores.append(f1)

    return res

tokenized_datasets = split_datasets.map(
    create_preprocess_function(reverse_translation_direction=False),
    batched=True,
    remove_columns=split_datasets["train"].column_names,
    num_proc=22
)

if REVERSE_TRANSLATION_DIRECTION:
    tokenized_datasets_rev = split_datasets.map(
        create_preprocess_function(reverse_translation_direction=True),
        batched=True,
        remove_columns=split_datasets["train"].column_names,
        num_proc=22
    )    
    tokenized_datasets['train'] = concatenate_datasets([ tokenized_datasets['train'], tokenized_datasets_rev['train']])
    tokenized_datasets['validation'] = concatenate_datasets([ tokenized_datasets['validation'], tokenized_datasets_rev['validation']])

print (tokenized_datasets)


# creates empty list to capture the f1 scores
f1_scores =[]

del split_datasets

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)
data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)
batch = data_collator([tokenized_datasets["train"][i] for i in range(1, 3)])

predict_dataset=eval_dataset=tokenized_datasets["validation"]

args = Seq2SeqTrainingArguments(
    output_name,
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=2,
    per_device_train_batch_size=32,
    per_device_eval_batch_size=32,
    eval_accumulation_steps=3,
    predict_with_generate=True,
    push_to_hub=False,
    do_train=DO_TRAIN,
    do_eval=True,
    fp16=True,
    #report_to="wandb"
    )

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=eval_dataset,
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,

)
# Access the F1 scores for each evaluation step and log them as a series
#wandb.log({"f1_scores_series": wandb.Table(data=f1_scores, columns=["F1 Score"])})

# trainer.evaluate(max_length=max_target_length)
if DO_TRAIN:
    trainer.train()

if  DO_EVAL:
    print("*** Evaluate ***")

    metrics = trainer.evaluate(max_length=max_target_length, num_beams=args.generation_num_beams, metric_key_prefix="eval")    
    metrics["eval_samples"] = len(eval_dataset)

    trainer.log_metrics("eval", metrics)
    trainer.save_metrics("eval", metrics)
    
if DO_PREDICT:
    print("*** Predict ***")
    predict_results = trainer.predict(
        predict_dataset, metric_key_prefix="predict", max_length=max_target_length, num_beams=args.generation_num_beams
    )
    metrics = predict_results.metrics
    
    trainer.log_metrics("predict", metrics)
    trainer.save_metrics("predict", metrics)

    if trainer.is_world_process_zero():
        if args.predict_with_generate:
            predictions = predict_results.predictions
            predictions = np.where(predictions != -100, predictions, tokenizer.pad_token_id)
            predictions = tokenizer.batch_decode(
                predictions, skip_special_tokens=True, clean_up_tokenization_spaces=True
            )
            predictions = [pred.strip() for pred in predictions]
            df = predict_dataset.to_pandas()
            df['pred'] = predictions
            df.to_parquet(Path(args.output_dir) / 'predictions.parquet')              
            
                
#wandb.finish()
# trainer.evaluate(max_length=max_target_length)
# trainer.push_to_hub(tags="translation", commit_message="Training complete")

